//
// This preferences-specification template declares some example
// preference fields and some conditional controls for enabling
// one field based on another.
// 
package org.eclipse.imp.leg.preferences;

page LEG {
    // There is one tab for each level of preference values:
    //  - "default" (as specified by "defvalue" attributes below)
    //  - "configuration" (shared by all Eclipse invocations from the same installation)
    //  - "instance" (shared by all Eclipse invocations on the same workspace)
    //  - "project" (project-specific settings)
    //
    // A value for a given preference key may be set at any or all of these levels.
    //
    // Value accesses are made from a client-specified context (one of the above 4 levels).
    //
    // If no value for the given preference key exists at the specified level, it is inherited
    // from the next level above, going up to the default level (which always has a value), if
    // necessary, to find a value.
    //
    // Clients will typically qualify their accesses using either the instance (workspace)
    // context or a project. This context is established when the client creates the
    // PreferencesService instance.
    //
    // "in" tabs appear in the preference page; "out" tabs do not.
    // The following combination gives the "classic" Eclipse behavior.
    tabs {
    	default out { }
    	configuration out { }
    	instance in {  }
    	project out { }
    }

    // TODO Customize the preference fields and their attributes
    fields {
        // START HERE
        boolean UseDefaultIncludePath { defvalue true; }
        dirlist IncludePathToUse {
            tooltip "A semicolon-separated list of folders to search for include files";
            defvalue ".;..;${pluginResource:org.eclipse.imp.leg/include}";
        } unless UseDefaultIncludePath
        string SourceFileExtensions {
            tooltip "A comma-separated list of file name extensions identifying the source files to process";
            defvalue "leg";
        }
        boolean GenerateLog {
            tooltip "If true, place detailed information from the build process in a log file";
            defvalue true;
        }
    	int MaxLogEntries {
    	    label "Maximum # of log entries";
    	    range 0 .. 1000;
    	    defvalue 100;
    	} if GenerateLog
    }
}
